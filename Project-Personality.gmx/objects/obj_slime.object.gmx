<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_s_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init

//constants
grav = 0.28;
jump_power = 7;
accel = .2;
ground_friction = 1-0.15;
air_friction = 1-0.05;
max_spd = 3;
max_spd_air = 1;


//image_speeds
imgs_idle = 1/5;
imgs_walking = 1/5;
imgs_sticking = 1/10;
imgs_pre_sticking = 1/5;
imgs_falling = 0;
//imgs_jumping = 1/5;
imgs_landing = 1/5;

//controls
right = ord("D");
left = ord("A");
jump = ord("W");
down = ord("S");

//Check for arrow keys at start
arrow = "neither";
if (keyboard_check(right)){
    if (keyboard_check(left)) arrow = "neither";
    else arrow = "right"
} else if (keyboard_check(left)){
    arrow = "left";
}

//initiating
x_velocity = 0;
y_velocity = 0;
shooting = false;
scr_set_s_idle();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grappling hook
if mouse_check_button_pressed(mb_right)
    {
    instance_create(x,y,obj_grappling);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stuff

//track directions
if (keyboard_check_pressed(right)){
    arrow = "right"
}
if (keyboard_check_pressed(left)){
    arrow = "left";
}
if (keyboard_check_released(right) &amp;&amp; !(arrow="left")){
    if (keyboard_check(left)) arrow = "left";
    else arrow = "neither";
}
if (keyboard_check_released(left)&amp;&amp; !(arrow="right")){
    if (keyboard_check(right)) arrow = "right";
    else arrow = "neither";
}


//gravity
if (state != scr_s_sticking) y_velocity += grav;

//Collision
if (place_meeting(x+x_velocity, y+y_velocity, obj_wall)) {
    
    //x-axis
    if (place_meeting(x+x_velocity, y, obj_wall)) {
        //slide against wall
        if (state = scr_s_falling) {
            scr_set_s_sticking();
        }
        for (var i = -sign(x_velocity); place_meeting(x+x_velocity, y, obj_wall); x_velocity += i){}
        x += x_velocity;
        x_velocity = 0;
    }
    //y-axis
    if (place_meeting(x, y+y_velocity, obj_wall)) {
        if ((state = scr_s_falling) &amp;&amp; (y_velocity &gt; 0)) {
            //land if falling
            scr_set_s_landing();
        }
        for (var i = -sign(y_velocity); place_meeting(x, y+y_velocity, obj_wall); y_velocity += i){}
        y += y_velocity;
        y_velocity = 0;
    }
    //Both at once (if everything else fails... 0.0)
    if (place_meeting(x+x_velocity, y+y_velocity, obj_wall)) {
        x_pos = x; y_pos = y;
        var dy = sign(y_velocity)*abs(y_velocity / x_velocity);
        var dx = sign(x_velocity);
        while (place_meeting(x+x_velocity, y+y_velocity, obj_wall)) {
            x_velocity -= dx;
            y_velocity -= dy;
        }
        x = round(x+x_velocity);
        y = round(y+y_velocity);
        x_velocity = 0;
        y_velocity = 0;
    }
}

x = round(x+x_velocity);
y = round(y+y_velocity);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spr_s_landing
if (sprite_index = spr_s_landing) {
    scr_set_s_idle();
    scr_s_idle();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spr_s_sticking
if (sprite_index == spr_s_sticking) image_index = image_number-1//scr_set_s_falling();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
