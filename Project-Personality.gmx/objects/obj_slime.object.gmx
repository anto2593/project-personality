<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_s_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>mask_slime</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init

//constants
jump_power = 5;
accel = 0.4;
ground_friction = 1-0.2;
air_friction = 1-0.05;
max_spd = 1.5;
max_spd_air = 1;
grappling_power = 0.5;
grappling_crittical_lth = 15;


//image_speeds
imgs_idle = 1/5;
imgs_walking = 1/2;
imgs_pre_sticking = 1/5;
imgs_sticking = 1/7;
imgs_falling = 0;
//imgs_jumping = 1/5;
imgs_landing = 1/5;

//controls
right = ord("D");
left = ord("A");
jump = ord("W");
down = ord("S");
transform = vk_space;

//Check for arrow keys at start
arrow = "neither";
if (keyboard_check(right)){
    if (keyboard_check(left)) arrow = "neither";
    else arrow = "right"
} else if (keyboard_check(left)){
    arrow = "left";
}

//initiating
x_velocity = 0;
y_velocity = 0;
grappling = noone;
scr_set_s_idle();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input, gravity and collision check

//track directions
if (keyboard_check_pressed(right)){
    arrow = "right"
}
if (keyboard_check_pressed(left)){
    arrow = "left";
}
if (keyboard_check_released(right) &amp;&amp; !(arrow="left")){
    if (keyboard_check(left)) arrow = "left";
    else arrow = "neither";
}
if (keyboard_check_released(left)&amp;&amp; !(arrow="right")){
    if (keyboard_check(right)) arrow = "right";
    else arrow = "neither";
}

//gravity
if (state != scr_s_sticking) y_velocity += global.grav;

//collision
scr_collision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grappling slime
if mouse_check_button_pressed(mb_right)
    {
    //make the grappling slime
    var offset = sprite_get_height(mask_index)/3;
    grappling = instance_create(x, y-offset,obj_grappling);
    grappling.offset = offset;
    }
else if (instance_exists(grappling))
    {
    //destroy the grappling slime
    if mouse_check_button_released(mb_right) instance_destroy(grappling);
    else if grappling_crittical_lth &lt; grappling.length &amp;&amp; !grappling.extending
        {
        //apply the grappling slime effect
        var angle = -degtorad(point_direction(x, y-sprite_get_height(mask_index)/3, grappling.x, grappling.y));
        if !instance_exists(grappling.item)
            {
            x_velocity += cos(angle)*grappling_power;
            y_velocity += sin(angle)*grappling_power;
            }
        else
            {
            var item = grappling.item;
            x_velocity += cos(angle)*grappling_power*1/4;
            y_velocity += sin(angle)*grappling_power*1/4;
            item.x_velocity -= cos(angle)*grappling_power;
            item.y_velocity -= sin(angle)*grappling_power;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision check and position update

scr_collision();

x = round(x+x_velocity); //rounding makes smoother when you can only move an integer amount of pixels
y = round(y+y_velocity);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spr_s_landing
if (sprite_index = spr_s_landing) {
    scr_set_s_idle();
    scr_s_idle();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spr_s_sticking
if (sprite_index == spr_s_sticking) image_index = image_number-1//scr_set_s_falling();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
